{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AreaTypeSimple": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"isGroup"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AreaArray": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"areaType": {
						"$ref": "#/components/schemas/AreaTypeSimple"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"areaType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaGetResponse": {
				"properties": {
					"area-array": {
						"items": {
							"$ref": "#/components/schemas/AreaArray"
						},
						"type": "array"
					}
				},
				"required": [
					"area-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AreaTypeArray": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"isGroup"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AreaTypeIdentifer": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					},
					"areaType": {
						"$ref": "#/components/schemas/AreaTypeArray"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"isGroup",
					"areaType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BoundingBox": {
				"properties": {
					"minLatitude": {
						"type": "number",
						"format": "double"
					},
					"maxLatitude": {
						"type": "number",
						"format": "double"
					},
					"minLongitude": {
						"type": "number",
						"format": "double"
					},
					"maxLongitude": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"minLatitude",
					"maxLatitude",
					"minLongitude",
					"maxLongitude"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GovernedBy": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"governs": {
						"$ref": "#/components/schemas/AreaTypeArray"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"governs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Type": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DefaultComparisonGroup": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/Type"
					}
				},
				"required": [
					"identifier",
					"isCustom",
					"label",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Area": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"areaType": {
						"$ref": "#/components/schemas/AreaTypeIdentifer"
					},
					"boundingBox": {
						"$ref": "#/components/schemas/BoundingBox"
					},
					"governedBy": {
						"$ref": "#/components/schemas/GovernedBy"
					},
					"memberOf": {
						"items": {
							"$ref": "#/components/schemas/DefaultComparisonGroup"
						},
						"type": "array"
					},
					"ownerOf": {
						"items": {
							"$ref": "#/components/schemas/DefaultComparisonGroup"
						},
						"type": "array"
					},
					"defaultComparisonGroup": {
						"$ref": "#/components/schemas/DefaultComparisonGroup"
					},
					"childOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeIdentifer"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"areaType",
					"boundingBox",
					"governedBy",
					"memberOf",
					"ownerOf",
					"defaultComparisonGroup",
					"childOf"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaIdentifierGetResponse": {
				"properties": {
					"area": {
						"$ref": "#/components/schemas/Area"
					}
				},
				"required": [
					"area"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaIdentifierBoundGetResponse": {
				"properties": {
					"boundingBox": {
						"$ref": "#/components/schemas/BoundingBox"
					}
				},
				"required": [
					"boundingBox"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaTypeGetResponse": {
				"properties": {
					"areaType-array": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					}
				},
				"required": [
					"areaType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaTypeCurrentGetResponse": {
				"properties": {
					"areaType-array": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					}
				},
				"required": [
					"areaType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaTypeFilterDataGetResponse": {
				"properties": {
					"areaType-array": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					}
				},
				"required": [
					"areaType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AreaTypeArrayVerbose": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					},
					"isMain": {
						"type": "boolean"
					},
					"childOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"parentOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"memberOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"sameAs": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"isGroup",
					"isMain",
					"childOf",
					"parentOf",
					"memberOf",
					"sameAs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaTypeVerboseGetResponse": {
				"properties": {
					"areaType-array": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArrayVerbose"
						},
						"type": "array"
					}
				},
				"required": [
					"areaType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AreaType": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					},
					"isMain": {
						"type": "boolean"
					},
					"childOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"parentOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"memberOf": {
						"items": {
							"$ref": "#/components/schemas/AreaTypeArray"
						},
						"type": "array"
					},
					"sameAs": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"isGroup",
					"isMain",
					"childOf",
					"parentOf",
					"memberOf",
					"sameAs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAreaTypeIdentifierGetResponse": {
				"properties": {
					"areaType": {
						"$ref": "#/components/schemas/AreaType"
					}
				},
				"required": [
					"areaType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IBoundsGetResponse": {
				"properties": {
					"boundingBox": {
						"$ref": "#/components/schemas/BoundingBox"
					}
				},
				"required": [
					"boundingBox"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CalculationMethodArray": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICalculationMethodGetResponse": {
				"properties": {
					"calculationMethod-array": {
						"items": {
							"$ref": "#/components/schemas/CalculationMethodArray"
						},
						"type": "array"
					}
				},
				"required": [
					"calculationMethod-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Field": {
				"properties": {
					"label": {
						"type": "string"
					},
					"identifier": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"lookupTable": {
						"type": "string"
					},
					"lookupId": {
						"type": "string"
					},
					"lookupDisplay": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"identifier",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CalculationMethodArrayVerbose": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/Field"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"description",
					"fields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICalculationMethodVerboseGetResponse": {
				"properties": {
					"calculationMethod-array": {
						"items": {
							"$ref": "#/components/schemas/CalculationMethodArrayVerbose"
						},
						"type": "array"
					}
				},
				"required": [
					"calculationMethod-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FieldIdentifier": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CalculationMethodIdentifier": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"fields": {
						"items": {
							"$ref": "#/components/schemas/FieldIdentifier"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"description"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICalculationMethodIdentifierGetResponse": {
				"properties": {
					"calculationMethod": {
						"$ref": "#/components/schemas/CalculationMethodIdentifier"
					}
				},
				"required": [
					"calculationMethod"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Identifier": {
				"enum": [
					"AcademicYear",
					"AnnualFromMarch",
					"BiannuallyFinancial",
					"CalendarQuarter",
					"CalendarYear",
					"CensusYear",
					"DTOCWeek",
					"Daily",
					"EarlyYearsCensusYear",
					"ElectionYear",
					"FinancialQuarter",
					"FinancialYear",
					"FiveYearCalendar",
					"FiveYearFinancial",
					"Month",
					"RollingCalendarQuarter",
					"RollingWeek",
					"SnapshotAnnual30September",
					"SnapshotAnnual31March",
					"SnapshotAnnual31May",
					"SnapshotAnnualFebruary",
					"SnapshotAnnualJanuary",
					"SnapshotQuarterly",
					"TaxbaseAnnual",
					"ThreeYearAcademic",
					"ThreeYearFinancial",
					"ThreeYearPeriod",
					"ThreeYearWinters",
					"WeekEndFriday",
					"WeekEndSunday",
					"Winter",
					"YearToDateQuarter2"
				],
				"type": "string"
			},
			"Label": {
				"enum": [
					"Academic year",
					"Annual (from March)",
					"Biannually financial",
					"Calendar quarter",
					"Calendar year",
					"Census year",
					"Daily",
					"Delayed Transfer of Care week",
					"Early Years Census year",
					"Election year",
					"Financial quarter",
					"Financial year",
					"Financial year (to quarter 2)",
					"Five-year calendar",
					"Five-year financial",
					"Month",
					"Rolling calendar quarter",
					"Rolling week",
					"Snapshot (30 September)",
					"Snapshot (31 March)",
					"Snapshot (31 May)",
					"Snapshot (February)",
					"Snapshot (January)",
					"Snapshot (quarterly)",
					"Taxbase annual",
					"Three-year academic",
					"Three-year financial",
					"Three-year period",
					"Three-year winters",
					"Weekly",
					"Weekly (to Sunday)",
					"Winter"
				],
				"type": "string"
			},
			"Frequency": {
				"enum": [
					"Annually",
					"Daily",
					"EveryDecade",
					"Monthly",
					"Quarterly",
					"SixMonths",
					"Weekly"
				],
				"type": "string"
			},
			"AtorPeriodType": {
				"properties": {
					"identifier": {
						"$ref": "#/components/schemas/Identifier"
					},
					"label": {
						"$ref": "#/components/schemas/Label"
					},
					"frequency": {
						"$ref": "#/components/schemas/Frequency"
					}
				},
				"required": [
					"identifier",
					"label",
					"frequency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CalculationPeriodTypeRuleArray": {
				"properties": {
					"numeratorPeriodType": {
						"$ref": "#/components/schemas/AtorPeriodType"
					},
					"denominatorPeriodType": {
						"$ref": "#/components/schemas/AtorPeriodType"
					},
					"matchType": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"numeratorPeriodType",
					"denominatorPeriodType",
					"matchType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICalculationPeriodTypeRulesGetResponse": {
				"properties": {
					"calculationPeriodTypeRuleArray": {
						"items": {
							"$ref": "#/components/schemas/CalculationPeriodTypeRuleArray"
						},
						"type": "array"
					}
				},
				"required": [
					"calculationPeriodTypeRuleArray"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ClientApplication": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IClientApplicationGetResponse": {
				"properties": {
					"clientApplicationArray": {
						"items": {
							"$ref": "#/components/schemas/ClientApplication"
						},
						"type": "array"
					}
				},
				"required": [
					"clientApplicationArray"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IClientApplicationVerboseGetResponse": {
				"properties": {
					"clientApplicationArray": {
						"items": {
							"$ref": "#/components/schemas/ClientApplication"
						},
						"type": "array"
					}
				},
				"required": [
					"clientApplicationArray"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IClientApplicationIdentifierGetResponse": {
				"properties": {
					"clientApplication": {
						"$ref": "#/components/schemas/ClientApplication"
					}
				},
				"required": [
					"clientApplication"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComparisonGroup": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/Type"
					}
				},
				"required": [
					"identifier",
					"isCustom",
					"label",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupsGetResponse": {
				"properties": {
					"comparisonGroup-array": {
						"items": {
							"$ref": "#/components/schemas/ComparisonGroup"
						},
						"type": "array"
					}
				},
				"required": [
					"comparisonGroup-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Member": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"areaType": {
						"$ref": "#/components/schemas/Member"
					},
					"isGroup": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Tier": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/Type"
					}
				},
				"required": [
					"identifier",
					"isCustom",
					"label",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComparisonGroupIdentifier": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"label": {
						"type": "string"
					},
					"members": {
						"items": {
							"$ref": "#/components/schemas/Member"
						},
						"type": "array"
					},
					"owners": {
						"items": {
							"$ref": "#/components/schemas/Member"
						},
						"type": "array"
					},
					"isMain": {
						"type": "boolean"
					},
					"isHidden": {
						"type": "boolean"
					},
					"bottomTier": {
						"$ref": "#/components/schemas/Tier"
					},
					"topTier": {
						"$ref": "#/components/schemas/Tier"
					},
					"type": {
						"$ref": "#/components/schemas/Type"
					}
				},
				"required": [
					"identifier",
					"isCustom",
					"label",
					"members",
					"owners",
					"isMain",
					"isHidden",
					"bottomTier",
					"topTier",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupsIdentifierGetResponse": {
				"properties": {
					"comparisonGroup": {
						"$ref": "#/components/schemas/ComparisonGroupIdentifier"
					}
				},
				"required": [
					"comparisonGroup"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupsIdentifierBoundsGetResponse": {
				"properties": {
					"boundingBox": {
						"$ref": "#/components/schemas/BoundingBox"
					}
				},
				"required": [
					"boundingBox"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComparisonGroupTypeArray": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupTypesGetResponse": {
				"properties": {
					"comparisonGroupType-array": {
						"items": {
							"$ref": "#/components/schemas/ComparisonGroupTypeArray"
						},
						"type": "array"
					}
				},
				"required": [
					"comparisonGroupType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupTypesVerboseGetResponse": {
				"properties": {
					"comparisonGroupType-array": {
						"items": {
							"$ref": "#/components/schemas/ComparisonGroupTypeArray"
						},
						"type": "array"
					}
				},
				"required": [
					"comparisonGroupType-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ComparisonGroupType": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IComparisonGroupTypesIdentifierGetResponse": {
				"properties": {
					"comparisonGroupType": {
						"$ref": "#/components/schemas/ComparisonGroupType"
					}
				},
				"required": [
					"comparisonGroupType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Metadata": {
				"properties": {
					"columnGrouping": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"rowGrouping": {
						"items": {},
						"type": "array"
					}
				},
				"required": [
					"columnGrouping",
					"rowGrouping"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Areadata": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"altLabel": {
						"type": "string"
					},
					"isSummary": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"isSummary"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Column": {
				"properties": {
					"area": {
						"$ref": "#/components/schemas/Areadata"
					},
					"metricType": {
						"$ref": "#/components/schemas/Areadata"
					},
					"period": {
						"$ref": "#/components/schemas/Areadata"
					},
					"valueType": {
						"$ref": "#/components/schemas/Areadata"
					}
				},
				"required": [
					"area",
					"metricType",
					"period",
					"valueType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Value": {
				"properties": {
					"source": {
						"type": "number",
						"format": "double"
					},
					"value": {
						"type": "number",
						"format": "double"
					},
					"formatted": {
						"type": "string"
					},
					"format": {
						"type": "string"
					},
					"publicationStatus": {
						"type": "string"
					}
				},
				"required": [
					"source",
					"value",
					"formatted",
					"format",
					"publicationStatus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Row": {
				"properties": {
					"values": {
						"items": {
							"$ref": "#/components/schemas/Value"
						},
						"type": "array"
					}
				},
				"required": [
					"values"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataGetResponse": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/Metadata"
					},
					"columns": {
						"items": {
							"$ref": "#/components/schemas/Column"
						},
						"type": "array"
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/Row"
						},
						"type": "array"
					}
				},
				"required": [
					"metadata",
					"columns",
					"rows"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MetadataRegression": {
				"properties": {
					"columnGrouping": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"rowGrouping": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"columnGrouping",
					"rowGrouping"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MetricType": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"altLabel": {
						"type": "string"
					},
					"isSummary": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"isSummary"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ColumnRegression": {
				"properties": {
					"metricType": {
						"$ref": "#/components/schemas/MetricType"
					},
					"period": {
						"$ref": "#/components/schemas/MetricType"
					},
					"valueType": {
						"$ref": "#/components/schemas/MetricType"
					}
				},
				"required": [
					"metricType",
					"period",
					"valueType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RowRegression": {
				"properties": {
					"area": {
						"$ref": "#/components/schemas/MetricType"
					},
					"values": {
						"items": {
							"$ref": "#/components/schemas/Value"
						},
						"type": "array"
					}
				},
				"required": [
					"area",
					"values"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Coordinate": {
				"properties": {
					"x": {
						"type": "number",
						"format": "double"
					},
					"y": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"x",
					"y"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Regression": {
				"properties": {
					"coordinates": {
						"items": {
							"$ref": "#/components/schemas/Coordinate"
						},
						"type": "array"
					},
					"rSquare": {
						"type": "number",
						"format": "double"
					},
					"rSquareLog": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"coordinates",
					"rSquare"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataRegressionGetResponse": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/MetadataRegression"
					},
					"columns": {
						"items": {
							"$ref": "#/components/schemas/ColumnRegression"
						},
						"type": "array"
					},
					"rows": {
						"items": {
							"$ref": "#/components/schemas/RowRegression"
						},
						"type": "array"
					},
					"regressions": {
						"items": {
							"$ref": "#/components/schemas/Regression"
						},
						"type": "array"
					}
				},
				"required": [
					"metadata",
					"columns",
					"rows",
					"regressions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataTableGetResponse": {
				"properties": {
					"metricTypeIdentifier": {
						"type": "string"
					},
					"metricTypeLabel": {
						"type": "string"
					},
					"metricTypeAltLabel": {
						"type": "string"
					},
					"metricTypeIsSummary": {
						"type": "string"
					},
					"areaIdentifier": {
						"type": "string"
					},
					"areaLabel": {
						"type": "string"
					},
					"areaAltLabel": {
						"type": "string"
					},
					"areaIsSummary": {
						"type": "string"
					},
					"periodIdentifier": {
						"type": "string"
					},
					"periodLabel": {
						"type": "string"
					},
					"periodAltLabel": {
						"type": "string"
					},
					"periodIsSummary": {
						"type": "string"
					},
					"valueTypeIdentifier": {
						"type": "string"
					},
					"valueTypeLabel": {
						"type": "string"
					},
					"valueTypeIsSummary": {
						"type": "string"
					},
					"value": {
						"type": "number",
						"format": "double"
					},
					"source": {
						"type": "number",
						"format": "double"
					},
					"formatted": {
						"type": "string"
					},
					"format": {
						"type": "string"
					},
					"publicationStatus": {
						"type": "string"
					}
				},
				"required": [
					"metricTypeIdentifier",
					"metricTypeLabel",
					"metricTypeAltLabel",
					"metricTypeIsSummary",
					"areaIdentifier",
					"areaLabel",
					"areaAltLabel",
					"areaIsSummary",
					"periodIdentifier",
					"periodLabel",
					"periodAltLabel",
					"periodIsSummary",
					"valueTypeIdentifier",
					"valueTypeLabel",
					"valueTypeIsSummary",
					"value",
					"source",
					"formatted",
					"format",
					"publicationStatus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Dataset": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetGetResponse": {
				"properties": {
					"dataset-array": {
						"items": {
							"$ref": "#/components/schemas/Dataset"
						},
						"type": "array"
					}
				},
				"required": [
					"dataset-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApplicableAreaType": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					},
					"longLabel": {
						"type": "string"
					},
					"isGroup": {
						"type": "boolean"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel",
					"longLabel",
					"isGroup"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CollectionVerbose": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"isLocalCollectionRequired": {
						"type": "boolean"
					},
					"sourceName": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"url",
					"isLocalCollectionRequired",
					"sourceName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MeasurementUnit": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"shortLabel": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"shortLabel"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Measure": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"dataset": {
						"$ref": "#/components/schemas/Dataset"
					},
					"measurementUnit": {
						"$ref": "#/components/schemas/MeasurementUnit"
					}
				},
				"required": [
					"identifier",
					"label",
					"dataset",
					"measurementUnit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DatasetVerbose": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"isSpecificToOrganisation": {
						"type": "boolean"
					},
					"applicableAreaTypes": {
						"items": {
							"$ref": "#/components/schemas/ApplicableAreaType"
						},
						"type": "array"
					},
					"collection": {
						"$ref": "#/components/schemas/CollectionVerbose"
					},
					"measures": {
						"items": {
							"$ref": "#/components/schemas/Measure"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"isSpecificToOrganisation",
					"applicableAreaTypes",
					"collection",
					"measures"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetVerboseGetResponse": {
				"properties": {
					"dataset-array": {
						"items": {
							"$ref": "#/components/schemas/DatasetVerbose"
						},
						"type": "array"
					}
				},
				"required": [
					"dataset-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetIdentifierGetResponse": {
				"properties": {
					"dataset-array": {
						"items": {
							"$ref": "#/components/schemas/DatasetVerbose"
						},
						"type": "array"
					}
				},
				"required": [
					"dataset-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Replace": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"isLocalCollectionRequired": {
						"type": "boolean"
					},
					"sourceName": {
						"type": "string"
					}
				},
				"required": [
					"identifier",
					"label",
					"url",
					"isLocalCollectionRequired",
					"sourceName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DatasetCollection": {
				"properties": {
					"identifier": {
						"type": "string"
					},
					"label": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"isLocalCollectionRequired": {
						"type": "boolean"
					},
					"sourceName": {
						"type": "string"
					},
					"replaces": {
						"items": {
							"$ref": "#/components/schemas/Replace"
						},
						"type": "array"
					},
					"replacedBy": {
						"items": {
							"$ref": "#/components/schemas/Replace"
						},
						"type": "array"
					}
				},
				"required": [
					"identifier",
					"label",
					"url",
					"isLocalCollectionRequired",
					"sourceName",
					"replaces",
					"replacedBy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetCollectionGetResponse": {
				"properties": {
					"datasetCollection-array": {
						"items": {
							"$ref": "#/components/schemas/DatasetCollection"
						},
						"type": "array"
					}
				},
				"required": [
					"datasetCollection-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetCollectionVerboseGetResponse": {
				"properties": {
					"datasetCollection-array": {
						"items": {
							"$ref": "#/components/schemas/DatasetCollection"
						},
						"type": "array"
					}
				},
				"required": [
					"datasetCollection-array"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IDataSetCollectionIdentifierGetResponse": {
				"properties": {
					"datasetCollection": {
						"$ref": "#/components/schemas/DatasetCollection"
					}
				},
				"required": [
					"datasetCollection"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"apiKeyAuth": {
				"type": "apiKey",
				"in": "query",
				"name": "ApplicationKey"
			}
		}
	},
	"info": {
		"title": "Local Government Association API",
		"version": "v1",
		"description": "Access to 1 billion+ metric values for English areas drawn from approximately 50 organisations publishing metrics that describe local authorities and their component areas. (DkxYeiqbmsGVMHOkfbbUGUEomQYkfaiiEJCBDEtC)",
		"contact": {
			"name": "Oraclo LTD",
			"email": "admin@orcalo.co.uk",
			"url": "https://orcalo.co.uk/"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/v1/areas": {
			"get": {
				"operationId": "GetArea",
				"responses": {
					"200": {
						"description": "IAreaGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaGetResponse"
								}
							}
						}
					}
				},
				"description": "Due to the large number of areas an empty call returns no results. Results are limited to first 500 - subsequent results can be found using the \"pageNumber\" attribute",
				"summary": "Geographical areas used by LG Inform.",
				"tags": [
					"area"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Filter areas by comparison group and metric type's applicable area types",
						"in": "query",
						"name": "applicableToMetricType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by area type and parent area",
						"in": "query",
						"name": "area",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "All areas of a particular area type",
						"in": "query",
						"name": "areaType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Show areas for a spceified latitude and longitude (alongside lon parameter)",
						"in": "query",
						"name": "lat",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Show areas for a spceified latitude and longitude (alongside lat parameter)",
						"in": "query",
						"name": "lon",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If retrieving more than 20,000 areas or 500 shapes this can be used to return subsequent pages",
						"in": "query",
						"name": "pageNumber",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Number if items to be returned in each call up to a limit of 500, which is the default",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The search text can be either a postcode, a postcode district (the first half of the postcode), or a text string. Defaults to local authorities whether the areaType parameter is not specified",
						"in": "query",
						"name": "searchText",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/areas/{identifier}": {
			"get": {
				"operationId": "GetAreaIdentifier",
				"responses": {
					"200": {
						"description": "IAreaIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "The identifier is a GSS code, or comparison group identifier, used to find details about a particular geographical area",
				"tags": [
					"area"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(E09000010)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/areas/{identifier}/bounds": {
			"get": {
				"operationId": "GetAreaIdentifierBounds",
				"responses": {
					"200": {
						"description": "IAreaIdentifierBoundGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaIdentifierBoundGetResponse"
								}
							}
						}
					}
				},
				"summary": "Co-ordinates for the minimum and maxim longitude and latitudes for a particular area or group of areas",
				"tags": [
					"area"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(E09000006)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/areaTypes": {
			"get": {
				"operationId": "GetAreaTypes",
				"responses": {
					"200": {
						"description": "IAreaTypeGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaTypeGetResponse"
								}
							}
						}
					}
				},
				"summary": "Returns area types, including detailed area types such as MBC and London borough.",
				"tags": [
					"areaTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Limit to the area types within a particular area (E09000006)",
						"in": "query",
						"name": "area",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/areaTypes/current": {
			"get": {
				"operationId": "GetAreaTypesCurrent",
				"responses": {
					"200": {
						"description": "IAreaTypeCurrentGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaTypeCurrentGetResponse"
								}
							}
						}
					}
				},
				"summary": "Current user's area type. Requires a call using OAuth to retrieve data",
				"tags": [
					"areaTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/areaTypes/filter-data": {
			"get": {
				"operationId": "GetAreaTypesFilterData",
				"responses": {
					"200": {
						"description": "IAreaTypeFilterDataGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaTypeFilterDataGetResponse"
								}
							}
						}
					}
				},
				"summary": "Area types which have data for a particular metric type and time period",
				"tags": [
					"areaTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Show which area levels have data for a particular metric type (3214)",
						"in": "query",
						"name": "metricType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Show which area levels have data for a particular time period (cal_2005)",
						"in": "query",
						"name": "period",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/areaTypes/verbose": {
			"get": {
				"operationId": "GetAreaTypesVerbose",
				"responses": {
					"200": {
						"description": "IAreaTypeVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaTypeVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "List of all details for all area types",
				"tags": [
					"areaTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Filter down to main official geographies",
						"in": "query",
						"name": "isMain",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/areaTypes/{identifier}": {
			"get": {
				"operationId": "GetAreaTypesWithIdentifier",
				"responses": {
					"200": {
						"description": "IAreaTypeIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAreaTypeIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Details about a particular area type",
				"tags": [
					"areaTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(District)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/bounds": {
			"get": {
				"operationId": "GetBounds",
				"responses": {
					"200": {
						"description": "IBoundsGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IBoundsGetResponse"
								}
							}
						}
					}
				},
				"summary": "Co-ordinates for the minimum and maxim longitude and latitudes for a particular area or group of areas",
				"tags": [
					"bounds"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Returns the minimum and maximum longitudes for an area or group of areas",
						"in": "query",
						"name": "area",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/calculationMethods": {
			"get": {
				"operationId": "GetCalculationMethod",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ICalculationMethodGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show all available calculation methods",
				"tags": [
					"calculationMethods"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/calculationMethods/verbose": {
			"get": {
				"operationId": "GetCalculationMethodsVerbose",
				"responses": {
					"200": {
						"description": "ICalculationMethodVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ICalculationMethodVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show all properties of available calculation methods",
				"tags": [
					"calculationMethods"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/calculationMethods/{identifier}": {
			"get": {
				"operationId": "GetCalculationMethodsIdentifier",
				"responses": {
					"200": {
						"description": "ICalculationMethodIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ICalculationMethodIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show properties of a specified calculation methods",
				"tags": [
					"calculationMethods"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(1)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/calculationPeriodTypeRules": {
			"get": {
				"operationId": "GetCalculationPeriodTypeRules",
				"responses": {
					"200": {
						"description": "ICalculationPeriodTypeRulesGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ICalculationPeriodTypeRulesGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show match type for different combinations of numerator and denominator period type",
				"tags": [
					"calculationPeriodTypeRules"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Show match type for calculations with a specific denominator",
						"in": "query",
						"name": "denominatorPeriodType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Show match type for calculations with a specific numerator",
						"in": "query",
						"name": "numeratorPeriodType",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/clientApplications": {
			"get": {
				"operationId": "GetClientApplication",
				"responses": {
					"200": {
						"description": "IClientApplicationGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IClientApplicationGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show available client applications",
				"tags": [
					"clientApplications"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/clientApplications/verbose": {
			"get": {
				"operationId": "GetClientApplicationVerbose",
				"responses": {
					"200": {
						"description": "IClientApplicationVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IClientApplicationVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show available client applications",
				"tags": [
					"clientApplications"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/clientApplications/{identifier}": {
			"get": {
				"operationId": "GetClientApplicationIdentifier",
				"responses": {
					"200": {
						"description": "IClientApplicationIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IClientApplicationIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show details of specific client application",
				"tags": [
					"clientApplications"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(Inform)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/comparisonGroups": {
			"get": {
				"operationId": "GetComparisonGroup",
				"responses": {
					"200": {
						"description": "IComparisonGroupsGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupsGetResponse"
								}
							}
						}
					}
				},
				"summary": "Comparison groups are area groupings of different types, such as all district local authorities, or all fire organisations in England. Without parameters, all groups, excluding custom groups, are returned",
				"tags": [
					"comparisonGroups"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Only the main comparison groups, so includes groupings by authority type, but excludes things like groupings by near neighbours",
						"in": "query",
						"name": "mainOnly",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Groups of which the area is a member, but not necessarily an owner. If area 1 is a near neighbour of area 2, area 1 would be a member of the near neighbour group (along with the other near neighbours) and area 2 would be the owner of the group",
						"in": "query",
						"name": "memberArea",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Group which the area owns, but is not necessairly a member. An area is generally the owner of a group if the group is a main group, such as all local authorities, or is the area to which a group relates, such as near neighbours of an area",
						"in": "query",
						"name": "ownerArea",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Comparison groups of a specified comparison group type for a specified area. For example, which Experian Mosaic near neighbours a particular area has",
						"in": "query",
						"name": "type",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/comparisonGroups/{identifier}": {
			"get": {
				"operationId": "GetComparisonGroupIdentifier",
				"responses": {
					"200": {
						"description": "IComparisonGroupsIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupsIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Returns the details for a particular comparison group",
				"tags": [
					"comparisonGroups"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(AllLAInRegion_London)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/comparisonGroups/{identifier}/bounds": {
			"get": {
				"operationId": "GetComparisonGroupIdentifierBounds",
				"responses": {
					"200": {
						"description": "IComparisonGroupsIdentifierBoundsGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupsIdentifierBoundsGetResponse"
								}
							}
						}
					}
				},
				"summary": "Co-ordinates for the minimum and maxim longitude and latitudes for a particular comparison group",
				"tags": [
					"comparisonGroups"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(Core_English_Cities)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/comparisonGroupTypes": {
			"get": {
				"operationId": "GetComparisonGroupTypes",
				"responses": {
					"200": {
						"description": "IComparisonGroupTypesGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupTypesGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show types of comparison group available",
				"tags": [
					"comparisonGroupTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Filter groups by area membership",
						"in": "query",
						"name": "memberArea",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter groups by a specific area owner",
						"in": "query",
						"name": "ownerArea",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/comparisonGroupTypes/verbose": {
			"get": {
				"operationId": "GetComparisonGroupTypesVerbose",
				"responses": {
					"200": {
						"description": "IComparisonGroupTypesVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupTypesVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show full details of comparison group types available",
				"tags": [
					"comparisonGroupTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/comparisonGroupTypes/{identifier}": {
			"get": {
				"operationId": "GetComparisonGroupTypesIdentifier",
				"responses": {
					"200": {
						"description": "IComparisonGroupTypesIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IComparisonGroupTypesIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Show details of a specified comparison group",
				"tags": [
					"comparisonGroupTypes"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(AllLaInRegion)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/data": {
			"get": {
				"operationId": "GetData",
				"responses": {
					"200": {
						"description": "IDataGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataGetResponse"
								}
							}
						}
					}
				},
				"description": "Note that when the denominator metric type uses a different period type from the numerator. The first denominator period that has a \"end date\" less than the chosen numerator period is used with the denominator metric type",
				"summary": "Returns table or values to populate a user specified table component. At minimum, 'area', 'metricType' and 'period' parameters are required",
				"tags": [
					"data"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "metricType",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The time period that is to be returned. To just retrieve data for the latest available period, use \"latest\". For the most recent two time periods, use \"latest:2\", and so on. Otherwise one or more time period identifiers can be used",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The area or comparison group that the data values are for",
						"in": "query",
						"name": "area",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Specify how the results will be grouped when viewed in a tabular format",
						"in": "query",
						"name": "columnGrouping",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Whether the header cells should be labels or identifiers",
						"in": "query",
						"name": "headerCellType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If this is set to true, areas which do not have values will be included in the results",
						"in": "query",
						"name": "includeMissing",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Format for which the data will be used. For example table or pie",
						"in": "query",
						"name": "outputType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Specify how the results will be grouped when viewed in a tabular format",
						"in": "query",
						"name": "rowGrouping",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use summaryType to define the type of summary and what will be summarised. Example summary types are sum, min and max",
						"in": "query",
						"name": "summary",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The type of value that is returned for each query is defined by the valueType parameter, examples are raw, rank and band",
						"in": "query",
						"name": "valueType",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/data/regression": {
			"get": {
				"operationId": "GetDataRegression",
				"responses": {
					"200": {
						"description": "IDataRegressionGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataRegressionGetResponse"
								}
							}
						}
					}
				},
				"summary": "Returns table or values to populate a user specified table component and includes a regression x1, y1, x2, y2 coordinate for the regression line between each pair of columns. As with /data, at minimum 'area', 'metricType' and 'period' are required. The regression values appear at the end of the data results",
				"tags": [
					"data"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "metricType",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The time period that is to be returned. To just retrieve data for the latest available period, use \"latest\". For the most recent two time periods, use \"latest:2\", and so on. Otherwise one or more time period identifiers can be used",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The area or comparison group that the data values are for",
						"in": "query",
						"name": "area",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Specify how the results will be grouped when viewed in a tabular format",
						"in": "query",
						"name": "columnGrouping",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Whether the header cells should be labels or identifiers",
						"in": "query",
						"name": "headerCellType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "If this is set to true, areas which do not have values will be included in the results",
						"in": "query",
						"name": "includeMissing",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Format for which the data will be used. For example table or pie",
						"in": "query",
						"name": "outputType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Specify how the results will be grouped when viewed in a tabular format",
						"in": "query",
						"name": "rowGrouping",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Use summaryType to define the type of summary and what will be summarised. Example summary types are sum, min and max",
						"in": "query",
						"name": "summary",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The type of value that is returned for each query is defined by the valueType parameter, examples are raw, rank and band",
						"in": "query",
						"name": "valueType",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/data/data.table": {
			"get": {
				"operationId": "GetDataTable",
				"responses": {
					"200": {
						"description": "IDataTableGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IDataTableGetResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Returns data method results in JSON table format with a different row for each parameter. This accepts the same parameters as the /data method",
				"tags": [
					"data"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "The area or comparison group that the data values are for",
						"in": "query",
						"name": "area",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The time period that is to be returned. To just retrieve data for the latest available period, use \"latest\". For the most recent two time periods, use \"latest:2\", and so on. Otherwise one or more time period identifiers can be used",
						"in": "query",
						"name": "period",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The metric type the data value is for",
						"in": "query",
						"name": "metricType",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/datasets": {
			"get": {
				"operationId": "GetDataSet",
				"responses": {
					"200": {
						"description": "IDataSetGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetGetResponse"
								}
							}
						}
					}
				},
				"summary": "Returns a list of datasets. Only basic details are provided including identifier, label and some others",
				"tags": [
					"datasets"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/datasets/verbose": {
			"get": {
				"operationId": "GetDataSetVerbose",
				"responses": {
					"200": {
						"description": "IDataSetVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "Full details of all datasets",
				"tags": [
					"datasets"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/datasets/{identifier}": {
			"get": {
				"operationId": "GetDataSetIdentifier",
				"responses": {
					"200": {
						"description": "IDataSetIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Details about a particular dataset, using its identifier",
				"tags": [
					"datasets"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(102)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/datasetCollections": {
			"get": {
				"operationId": "GetDataSetCollection",
				"responses": {
					"200": {
						"description": "IDataSetCollectionGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetCollectionGetResponse"
								}
							}
						}
					}
				},
				"summary": "The source from which the data used by any related datasets was obtained",
				"tags": [
					"datasetCollections"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "Removes all filters on list <b>(1)</b>",
						"in": "query",
						"name": "filterOff",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/datasetCollections/verbose": {
			"get": {
				"operationId": "GetDataSetCollectionVerbose",
				"responses": {
					"200": {
						"description": "IDataSetCollectionVerboseGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetCollectionVerboseGetResponse"
								}
							}
						}
					}
				},
				"summary": "Full details of all sources used by datasets",
				"tags": [
					"datasetCollections"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": []
			}
		},
		"/v1/datasetCollections/{identifier}": {
			"get": {
				"operationId": "GetDataSetCollectionIdentifier",
				"responses": {
					"200": {
						"description": "IDataSetCollectionIdentifierGetResponse",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IDataSetCollectionIdentifierGetResponse"
								}
							}
						}
					}
				},
				"summary": "Full details of a particular source, using its identifier",
				"tags": [
					"datasetCollections"
				],
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"description": "(145)",
						"in": "path",
						"name": "identifier",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Inform Plus",
			"description": "The API catalogue contains the following 1 Local Government Association (LGA) API"
		},
		{
			"name": "areaTypes"
		},
		{
			"name": "area"
		},
		{
			"name": "bounds"
		},
		{
			"name": "calculationMethods"
		},
		{
			"name": "calculationPeriodTypeRules"
		},
		{
			"name": "clientApplications"
		},
		{
			"name": "comparisonGroupTypes"
		},
		{
			"name": "comparisonGroups"
		},
		{
			"name": "data"
		},
		{
			"name": "datasetCollections"
		},
		{
			"name": "datasets"
		}
	]
}